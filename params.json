{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"# Graph.js\r\n\r\nVery simple graph object. It provides some basic but powerful methods for simply connecting a set of nodes into a graph that you can then do whatever you want to.\r\n\r\n## Node(graph, index)\r\n\r\n### .connect(alias, node)\r\n\r\nCreates a named unidirectional edge between the node and the specified node.\r\n\r\n### .get(alias)\r\n\r\nReturns the node at the end of the named unidirectional edge.\r\n\r\n## Graph(n, connector)\r\n\r\nConstructs a graph of with n nodes. It then runs the connector through the map function if the connector is defined.\r\n\r\nEvery node is assigned the index of it's position in the node array 0 .. n.\r\n\r\n### .get(index)\r\n\r\nReturns the node with the provided index (assumes index is in the range of 0 .. n).\r\n\r\n### .alias(group, alias, node?)\r\n\r\nIf the optional node is provided it first assigns the node, to the group under the specified alias, before continuing.\r\n\r\nReturns the node at the group, alias.\r\n\r\n### .map(procedure)\r\n\r\nRuns the provided procedure function on each node. The procedure is passed the current graph and the node it is being run on.\r\n\r\n### .connect(node, offsets)\r\n\r\nTreats the 1D node array as a 2D array. Connects the node to each node found at the X, Y offset from the specified nodes X, Y. Names the connection as specified by the key from the offset definition.\r\n\r\nReturns the graph.\r\n\r\n**Example (Grid 2x2)**\r\n\r\n````js\r\nvar Grid = new Graph(2 * 2, function(graph, node) {\r\n  graph.connect(node, {\r\n    \"UP\":    { y:-1, x: 0 },\r\n    \"DOWN\":  { y: 1, x: 0 },\r\n    \"LEFT\":  { y: 0, x:-1 },\r\n    \"RIGHT\": { y: 0, x: 1 }\r\n  });\r\n});\r\n````\r\n\r\nEvery node in the above example will have an UP, DOWN, LEFT, RIGHT edge. If a node existed at that offset.\r\n\r\n## Examples\r\n\r\n### Eight-Directional Grid and the alias function\r\n\r\nThis is a slightly more complex example, here I not only create a grid where each cell knows about it's neighbours, but I also alias each node using it's row, col as an alias.\r\n\r\nI can now use the alias function to index by _row, col_ ...\r\n\r\n````js\r\nGrid.alias(\"TABLE\", \"0, 0\"); // equivalent Grid.get(0);\r\nGrid.alias(\"TABLE\", \"2, 2\"); // equivalent Grid.get(8);\r\n````\r\n\r\nThe definition of the graph.\r\n\r\n````js\r\nvar Grid = new Graph(3 * 3, function(graph, node) {\r\n  var x = Math.floor(node.index % Math.sqrt(graph.size));\r\n  var y = Math.floor(node.index / Math.sqrt(graph.size));\r\n  var alias = x.toString() + \", \" + y.toString();\r\n  graph.connect(graph.alias(\"TABLE\", alias, node), {\r\n    \"NORTH\":      { y:-1, x: 0 },\r\n    \"NORTH-EAST\": { y:-1, x: 1 },\r\n    \"EAST\":       { y: 0, x: 1 },\r\n    \"SOUTH-EAST\": { y: 1, x: 1 },\r\n    \"SOUTH\":      { y: 1, x: 0 },\r\n    \"SOUTH-WEST\": { y: 1, x:-1 },\r\n    \"WEST\":       { y: 0, x:-1 },\r\n    \"NORTH-WEST\": { y:-1, x:-1 }\r\n  });\r\n});\r\n````\r\n\r\n### Hexagonal Grid\r\n\r\nEven though the last two examples have focused on creating traditional grids, this is not the limit. You can create whatever kind of graph you want. Here I have created a Hexagonal grid.\r\n\r\n````js\r\nvar HexagonalGrid = new Graph(3 * 3, function(graph, node) {\r\n  if(Math.floor(node.index / Math.sqrt(graph.size)) % 2 == 0) {\r\n    graph.connect(node, {\r\n      \"HEX-EAST\":       { x: 1, y: 0 },\r\n      \"HEX-SOUTH-EAST\": { x: 0, y: 1 },\r\n      \"HEX-SOUTH-WEST\": { x:-1, y: 1 },\r\n      \"HEX-WEST\":       { x:-1, y: 0 },\r\n      \"HEX-NORTH-WEST\": { x:-1, y:-1 },\r\n      \"HEX-NORTH-EAST\": { x: 0, y:-1 }\r\n    });\r\n  } else {\r\n    graph.connect(node, {\r\n      \"HEX-EAST\":       { x: 1, y: 0 },\r\n      \"HEX-SOUTH-EAST\": { x: 1, y: 1 },\r\n      \"HEX-SOUTH-WEST\": { x: 0, y: 1 },\r\n      \"HEX-WEST\":       { x:-1, y: 0 },\r\n      \"HEX-NORTH-WEST\": { x: 0, y:-1 },\r\n      \"HEX-NORTH-EAST\": { x: 1, y:-1 }\r\n    });\r\n  }\r\n  return graph;\r\n});\r\n````\r\n\r\n## Licence\r\n\r\nCopyright 2012 Jack Galilee\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","name":"Graph.js","tagline":"Very simple graph object."}